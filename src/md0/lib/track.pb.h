// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track.proto

#ifndef PROTOBUF_track_2eproto__INCLUDED
#define PROTOBUF_track_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace md0 {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_track_2eproto();
void protobuf_AssignDesc_track_2eproto();
void protobuf_ShutdownFile_track_2eproto();

class Track;

// ===================================================================

class Track : public ::google::protobuf::Message {
 public:
  Track();
  virtual ~Track();
  
  Track(const Track& from);
  
  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();
  
  void Swap(Track* other);
  
  // implements Message ----------------------------------------------
  
  Track* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional string artist = 3;
  inline bool has_artist() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 3;
  inline const ::std::string& artist() const;
  inline void set_artist(const ::std::string& value);
  inline void set_artist(const char* value);
  inline void set_artist(const char* value, size_t size);
  inline ::std::string* mutable_artist();
  inline ::std::string* release_artist();
  
  // optional string album = 4;
  inline bool has_album() const;
  inline void clear_album();
  static const int kAlbumFieldNumber = 4;
  inline const ::std::string& album() const;
  inline void set_album(const ::std::string& value);
  inline void set_album(const char* value);
  inline void set_album(const char* value, size_t size);
  inline ::std::string* mutable_album();
  inline ::std::string* release_album();
  
  // optional string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string year = 6;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 6;
  inline const ::std::string& year() const;
  inline void set_year(const ::std::string& value);
  inline void set_year(const char* value);
  inline void set_year(const char* value, size_t size);
  inline ::std::string* mutable_year();
  inline ::std::string* release_year();
  
  // optional string track_number = 7;
  inline bool has_track_number() const;
  inline void clear_track_number();
  static const int kTrackNumberFieldNumber = 7;
  inline const ::std::string& track_number() const;
  inline void set_track_number(const ::std::string& value);
  inline void set_track_number(const char* value);
  inline void set_track_number(const char* value, size_t size);
  inline ::std::string* mutable_track_number();
  inline ::std::string* release_track_number();
  
  // optional string genre = 8;
  inline bool has_genre() const;
  inline void clear_genre();
  static const int kGenreFieldNumber = 8;
  inline const ::std::string& genre() const;
  inline void set_genre(const ::std::string& value);
  inline void set_genre(const char* value);
  inline void set_genre(const char* value, size_t size);
  inline ::std::string* mutable_genre();
  inline ::std::string* release_genre();
  
  // optional int64 created_at = 9;
  inline bool has_created_at() const;
  inline void clear_created_at();
  static const int kCreatedAtFieldNumber = 9;
  inline ::google::protobuf::int64 created_at() const;
  inline void set_created_at(::google::protobuf::int64 value);
  
  // optional int64 updated_at = 10;
  inline bool has_updated_at() const;
  inline void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 10;
  inline ::google::protobuf::int64 updated_at() const;
  inline void set_updated_at(::google::protobuf::int64 value);
  
  // optional int64 duration = 11;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 11;
  inline ::google::protobuf::int64 duration() const;
  inline void set_duration(::google::protobuf::int64 value);
  
  // optional int64 last_played_at = 12;
  inline bool has_last_played_at() const;
  inline void clear_last_played_at();
  static const int kLastPlayedAtFieldNumber = 12;
  inline ::google::protobuf::int64 last_played_at() const;
  inline void set_last_played_at(::google::protobuf::int64 value);
  
  // optional uint32 rating = 13;
  inline bool has_rating() const;
  inline void clear_rating();
  static const int kRatingFieldNumber = 13;
  inline ::google::protobuf::uint32 rating() const;
  inline void set_rating(::google::protobuf::uint32 value);
  
  // optional uint32 num_plays = 14;
  inline bool has_num_plays() const;
  inline void clear_num_plays();
  static const int kNumPlaysFieldNumber = 14;
  inline ::google::protobuf::uint32 num_plays() const;
  inline void set_num_plays(::google::protobuf::uint32 value);
  
  // optional bool is_video = 15;
  inline bool has_is_video() const;
  inline void clear_is_video();
  static const int kIsVideoFieldNumber = 15;
  inline bool is_video() const;
  inline void set_is_video(bool value);
  
  // @@protoc_insertion_point(class_scope:md0.protobuf.Track)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_artist();
  inline void clear_has_artist();
  inline void set_has_album();
  inline void clear_has_album();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_track_number();
  inline void clear_has_track_number();
  inline void set_has_genre();
  inline void clear_has_genre();
  inline void set_has_created_at();
  inline void clear_has_created_at();
  inline void set_has_updated_at();
  inline void clear_has_updated_at();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_last_played_at();
  inline void clear_has_last_played_at();
  inline void set_has_rating();
  inline void clear_has_rating();
  inline void set_has_num_plays();
  inline void clear_has_num_plays();
  inline void set_has_is_video();
  inline void clear_has_is_video();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_;
  ::std::string* artist_;
  ::std::string* album_;
  ::std::string* title_;
  ::std::string* year_;
  ::std::string* track_number_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rating_;
  ::std::string* genre_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 updated_at_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::int64 last_played_at_;
  ::google::protobuf::uint32 num_plays_;
  bool is_video_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_track_2eproto();
  friend void protobuf_AssignDesc_track_2eproto();
  friend void protobuf_ShutdownFile_track_2eproto();
  
  void InitAsDefaultInstance();
  static Track* default_instance_;
};
// ===================================================================


// ===================================================================

// Track

// required uint32 id = 1;
inline bool Track::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Track::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Track::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Track::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Track::id() const {
  return id_;
}
inline void Track::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string url = 2;
inline bool Track::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Track::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Track::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Track::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Track::url() const {
  return *url_;
}
inline void Track::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Track::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Track::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* Track::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string artist = 3;
inline bool Track::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Track::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Track::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Track::clear_artist() {
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    artist_->clear();
  }
  clear_has_artist();
}
inline const ::std::string& Track::artist() const {
  return *artist_;
}
inline void Track::set_artist(const ::std::string& value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void Track::set_artist(const char* value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void Track::set_artist(const char* value, size_t size) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_artist() {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  return artist_;
}
inline ::std::string* Track::release_artist() {
  clear_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = artist_;
    artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string album = 4;
inline bool Track::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Track::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Track::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Track::clear_album() {
  if (album_ != &::google::protobuf::internal::kEmptyString) {
    album_->clear();
  }
  clear_has_album();
}
inline const ::std::string& Track::album() const {
  return *album_;
}
inline void Track::set_album(const ::std::string& value) {
  set_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    album_ = new ::std::string;
  }
  album_->assign(value);
}
inline void Track::set_album(const char* value) {
  set_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    album_ = new ::std::string;
  }
  album_->assign(value);
}
inline void Track::set_album(const char* value, size_t size) {
  set_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    album_ = new ::std::string;
  }
  album_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_album() {
  set_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    album_ = new ::std::string;
  }
  return album_;
}
inline ::std::string* Track::release_album() {
  clear_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_;
    album_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string title = 5;
inline bool Track::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Track::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Track::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Track::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Track::title() const {
  return *title_;
}
inline void Track::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Track::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Track::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Track::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string year = 6;
inline bool Track::has_year() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Track::set_has_year() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Track::clear_has_year() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Track::clear_year() {
  if (year_ != &::google::protobuf::internal::kEmptyString) {
    year_->clear();
  }
  clear_has_year();
}
inline const ::std::string& Track::year() const {
  return *year_;
}
inline void Track::set_year(const ::std::string& value) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(value);
}
inline void Track::set_year(const char* value) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(value);
}
inline void Track::set_year(const char* value, size_t size) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_year() {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  return year_;
}
inline ::std::string* Track::release_year() {
  clear_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = year_;
    year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string track_number = 7;
inline bool Track::has_track_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Track::set_has_track_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Track::clear_has_track_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Track::clear_track_number() {
  if (track_number_ != &::google::protobuf::internal::kEmptyString) {
    track_number_->clear();
  }
  clear_has_track_number();
}
inline const ::std::string& Track::track_number() const {
  return *track_number_;
}
inline void Track::set_track_number(const ::std::string& value) {
  set_has_track_number();
  if (track_number_ == &::google::protobuf::internal::kEmptyString) {
    track_number_ = new ::std::string;
  }
  track_number_->assign(value);
}
inline void Track::set_track_number(const char* value) {
  set_has_track_number();
  if (track_number_ == &::google::protobuf::internal::kEmptyString) {
    track_number_ = new ::std::string;
  }
  track_number_->assign(value);
}
inline void Track::set_track_number(const char* value, size_t size) {
  set_has_track_number();
  if (track_number_ == &::google::protobuf::internal::kEmptyString) {
    track_number_ = new ::std::string;
  }
  track_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_track_number() {
  set_has_track_number();
  if (track_number_ == &::google::protobuf::internal::kEmptyString) {
    track_number_ = new ::std::string;
  }
  return track_number_;
}
inline ::std::string* Track::release_track_number() {
  clear_has_track_number();
  if (track_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = track_number_;
    track_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string genre = 8;
inline bool Track::has_genre() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Track::set_has_genre() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Track::clear_has_genre() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Track::clear_genre() {
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    genre_->clear();
  }
  clear_has_genre();
}
inline const ::std::string& Track::genre() const {
  return *genre_;
}
inline void Track::set_genre(const ::std::string& value) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(value);
}
inline void Track::set_genre(const char* value) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(value);
}
inline void Track::set_genre(const char* value, size_t size) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_genre() {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  return genre_;
}
inline ::std::string* Track::release_genre() {
  clear_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = genre_;
    genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 created_at = 9;
inline bool Track::has_created_at() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Track::set_has_created_at() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Track::clear_has_created_at() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Track::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
  clear_has_created_at();
}
inline ::google::protobuf::int64 Track::created_at() const {
  return created_at_;
}
inline void Track::set_created_at(::google::protobuf::int64 value) {
  set_has_created_at();
  created_at_ = value;
}

// optional int64 updated_at = 10;
inline bool Track::has_updated_at() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Track::set_has_updated_at() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Track::clear_has_updated_at() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Track::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
  clear_has_updated_at();
}
inline ::google::protobuf::int64 Track::updated_at() const {
  return updated_at_;
}
inline void Track::set_updated_at(::google::protobuf::int64 value) {
  set_has_updated_at();
  updated_at_ = value;
}

// optional int64 duration = 11;
inline bool Track::has_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Track::set_has_duration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Track::clear_has_duration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Track::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::int64 Track::duration() const {
  return duration_;
}
inline void Track::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
}

// optional int64 last_played_at = 12;
inline bool Track::has_last_played_at() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Track::set_has_last_played_at() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Track::clear_has_last_played_at() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Track::clear_last_played_at() {
  last_played_at_ = GOOGLE_LONGLONG(0);
  clear_has_last_played_at();
}
inline ::google::protobuf::int64 Track::last_played_at() const {
  return last_played_at_;
}
inline void Track::set_last_played_at(::google::protobuf::int64 value) {
  set_has_last_played_at();
  last_played_at_ = value;
}

// optional uint32 rating = 13;
inline bool Track::has_rating() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Track::set_has_rating() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Track::clear_has_rating() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Track::clear_rating() {
  rating_ = 0u;
  clear_has_rating();
}
inline ::google::protobuf::uint32 Track::rating() const {
  return rating_;
}
inline void Track::set_rating(::google::protobuf::uint32 value) {
  set_has_rating();
  rating_ = value;
}

// optional uint32 num_plays = 14;
inline bool Track::has_num_plays() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Track::set_has_num_plays() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Track::clear_has_num_plays() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Track::clear_num_plays() {
  num_plays_ = 0u;
  clear_has_num_plays();
}
inline ::google::protobuf::uint32 Track::num_plays() const {
  return num_plays_;
}
inline void Track::set_num_plays(::google::protobuf::uint32 value) {
  set_has_num_plays();
  num_plays_ = value;
}

// optional bool is_video = 15;
inline bool Track::has_is_video() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Track::set_has_is_video() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Track::clear_has_is_video() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Track::clear_is_video() {
  is_video_ = false;
  clear_has_is_video();
}
inline bool Track::is_video() const {
  return is_video_;
}
inline void Track::set_is_video(bool value) {
  set_has_is_video();
  is_video_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace md0

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_track_2eproto__INCLUDED
