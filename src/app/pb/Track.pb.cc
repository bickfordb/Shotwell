// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Track.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace track {

namespace {

const ::google::protobuf::Descriptor* Track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Track_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackTableKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackTableKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathIndexKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathIndexKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathIndexValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathIndexValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Track_2eproto() {
  protobuf_AddDesc_Track_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Track.proto");
  GOOGLE_CHECK(file != NULL);
  Track_descriptor_ = file->message_type(0);
  static const int Track_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, createdat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, updatedat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, isvideo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, isaudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, lastplayedat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, coverartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, iscoverartchecked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, tracknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, duration_),
  };
  Track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Track_descriptor_,
      Track::default_instance_,
      Track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Track));
  TrackTableKey_descriptor_ = file->message_type(1);
  static const int TrackTableKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackTableKey, id_),
  };
  TrackTableKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackTableKey_descriptor_,
      TrackTableKey::default_instance_,
      TrackTableKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackTableKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackTableKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackTableKey));
  PathIndexKey_descriptor_ = file->message_type(2);
  static const int PathIndexKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathIndexKey, path_),
  };
  PathIndexKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathIndexKey_descriptor_,
      PathIndexKey::default_instance_,
      PathIndexKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathIndexKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathIndexKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathIndexKey));
  PathIndexValue_descriptor_ = file->message_type(3);
  static const int PathIndexValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathIndexValue, id_),
  };
  PathIndexValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathIndexValue_descriptor_,
      PathIndexValue::default_instance_,
      PathIndexValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathIndexValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathIndexValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathIndexValue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Track_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Track_descriptor_, &Track::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackTableKey_descriptor_, &TrackTableKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathIndexKey_descriptor_, &PathIndexKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathIndexValue_descriptor_, &PathIndexValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Track_2eproto() {
  delete Track::default_instance_;
  delete Track_reflection_;
  delete TrackTableKey::default_instance_;
  delete TrackTableKey_reflection_;
  delete PathIndexKey::default_instance_;
  delete PathIndexKey_reflection_;
  delete PathIndexValue::default_instance_;
  delete PathIndexValue_reflection_;
}

void protobuf_AddDesc_Track_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Track.proto\022\005track\"\263\002\n\005Track\022\n\n\002id\030\001 \001"
    "(\004\022\021\n\tcreatedAt\030\002 \001(\004\022\021\n\tupdatedAt\030\003 \001(\004"
    "\022\017\n\007isVideo\030\004 \001(\010\022\017\n\007isAudio\030\005 \001(\010\022\024\n\014la"
    "stPlayedAt\030\006 \001(\004\022\r\n\005album\030\010 \001(\t\022\016\n\006artis"
    "t\030\t \001(\t\022\022\n\ncoverArtId\030\n \001(\t\022\r\n\005genre\030\013 \001"
    "(\t\022\014\n\004path\030\014 \001(\t\022\021\n\tpublisher\030\r \001(\t\022\r\n\005t"
    "itle\030\016 \001(\t\022\014\n\004year\030\017 \001(\t\022\031\n\021isCoverArtCh"
    "ecked\030\020 \001(\010\022\023\n\013trackNumber\030\021 \001(\t\022\020\n\010dura"
    "tion\030\022 \001(\004\"\033\n\rTrackTableKey\022\n\n\002id\030\001 \001(\004\""
    "\034\n\014PathIndexKey\022\014\n\004path\030\001 \001(\t\"\034\n\016PathInd"
    "exValue\022\n\n\002id\030\001 \001(\004", 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Track.proto", &protobuf_RegisterTypes);
  Track::default_instance_ = new Track();
  TrackTableKey::default_instance_ = new TrackTableKey();
  PathIndexKey::default_instance_ = new PathIndexKey();
  PathIndexValue::default_instance_ = new PathIndexValue();
  Track::default_instance_->InitAsDefaultInstance();
  TrackTableKey::default_instance_->InitAsDefaultInstance();
  PathIndexKey::default_instance_->InitAsDefaultInstance();
  PathIndexValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Track_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Track_2eproto {
  StaticDescriptorInitializer_Track_2eproto() {
    protobuf_AddDesc_Track_2eproto();
  }
} static_descriptor_initializer_Track_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Track::kIdFieldNumber;
const int Track::kCreatedAtFieldNumber;
const int Track::kUpdatedAtFieldNumber;
const int Track::kIsVideoFieldNumber;
const int Track::kIsAudioFieldNumber;
const int Track::kLastPlayedAtFieldNumber;
const int Track::kAlbumFieldNumber;
const int Track::kArtistFieldNumber;
const int Track::kCoverArtIdFieldNumber;
const int Track::kGenreFieldNumber;
const int Track::kPathFieldNumber;
const int Track::kPublisherFieldNumber;
const int Track::kTitleFieldNumber;
const int Track::kYearFieldNumber;
const int Track::kIsCoverArtCheckedFieldNumber;
const int Track::kTrackNumberFieldNumber;
const int Track::kDurationFieldNumber;
#endif  // !_MSC_VER

Track::Track()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Track::InitAsDefaultInstance() {
}

Track::Track(const Track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Track::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  createdat_ = GOOGLE_ULONGLONG(0);
  updatedat_ = GOOGLE_ULONGLONG(0);
  isvideo_ = false;
  isaudio_ = false;
  lastplayedat_ = GOOGLE_ULONGLONG(0);
  album_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coverartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publisher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscoverartchecked_ = false;
  tracknumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Track::~Track() {
  SharedDtor();
}

void Track::SharedDtor() {
  if (album_ != &::google::protobuf::internal::kEmptyString) {
    delete album_;
  }
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    delete artist_;
  }
  if (coverartid_ != &::google::protobuf::internal::kEmptyString) {
    delete coverartid_;
  }
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    delete genre_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (publisher_ != &::google::protobuf::internal::kEmptyString) {
    delete publisher_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (year_ != &::google::protobuf::internal::kEmptyString) {
    delete year_;
  }
  if (tracknumber_ != &::google::protobuf::internal::kEmptyString) {
    delete tracknumber_;
  }
  if (this != default_instance_) {
  }
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Track_descriptor_;
}

const Track& Track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Track_2eproto();  return *default_instance_;
}

Track* Track::default_instance_ = NULL;

Track* Track::New() const {
  return new Track;
}

void Track::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    createdat_ = GOOGLE_ULONGLONG(0);
    updatedat_ = GOOGLE_ULONGLONG(0);
    isvideo_ = false;
    isaudio_ = false;
    lastplayedat_ = GOOGLE_ULONGLONG(0);
    if (has_album()) {
      if (album_ != &::google::protobuf::internal::kEmptyString) {
        album_->clear();
      }
    }
    if (has_artist()) {
      if (artist_ != &::google::protobuf::internal::kEmptyString) {
        artist_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_coverartid()) {
      if (coverartid_ != &::google::protobuf::internal::kEmptyString) {
        coverartid_->clear();
      }
    }
    if (has_genre()) {
      if (genre_ != &::google::protobuf::internal::kEmptyString) {
        genre_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_publisher()) {
      if (publisher_ != &::google::protobuf::internal::kEmptyString) {
        publisher_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_year()) {
      if (year_ != &::google::protobuf::internal::kEmptyString) {
        year_->clear();
      }
    }
    iscoverartchecked_ = false;
    if (has_tracknumber()) {
      if (tracknumber_ != &::google::protobuf::internal::kEmptyString) {
        tracknumber_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    duration_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_createdAt;
        break;
      }
      
      // optional uint64 createdAt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createdAt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createdat_)));
          set_has_createdat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_updatedAt;
        break;
      }
      
      // optional uint64 updatedAt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatedAt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatedat_)));
          set_has_updatedat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isVideo;
        break;
      }
      
      // optional bool isVideo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVideo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvideo_)));
          set_has_isvideo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isAudio;
        break;
      }
      
      // optional bool isAudio = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaudio_)));
          set_has_isaudio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastPlayedAt;
        break;
      }
      
      // optional uint64 lastPlayedAt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastPlayedAt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastplayedat_)));
          set_has_lastplayedat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_album;
        break;
      }
      
      // optional string album = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album().data(), this->album().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_artist;
        break;
      }
      
      // optional string artist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_coverArtId;
        break;
      }
      
      // optional string coverArtId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coverArtId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coverartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->coverartid().data(), this->coverartid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_genre;
        break;
      }
      
      // optional string genre = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_path;
        break;
      }
      
      // optional string path = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_publisher;
        break;
      }
      
      // optional string publisher = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_title;
        break;
      }
      
      // optional string title = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_year;
        break;
      }
      
      // optional string year = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_year:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->year().data(), this->year().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isCoverArtChecked;
        break;
      }
      
      // optional bool isCoverArtChecked = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCoverArtChecked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscoverartchecked_)));
          set_has_iscoverartchecked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_trackNumber;
        break;
      }
      
      // optional string trackNumber = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracknumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tracknumber().data(), this->tracknumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_duration;
        break;
      }
      
      // optional uint64 duration = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // optional uint64 createdAt = 2;
  if (has_createdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->createdat(), output);
  }
  
  // optional uint64 updatedAt = 3;
  if (has_updatedat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->updatedat(), output);
  }
  
  // optional bool isVideo = 4;
  if (has_isvideo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvideo(), output);
  }
  
  // optional bool isAudio = 5;
  if (has_isaudio()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isaudio(), output);
  }
  
  // optional uint64 lastPlayedAt = 6;
  if (has_lastplayedat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->lastplayedat(), output);
  }
  
  // optional string album = 8;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->album(), output);
  }
  
  // optional string artist = 9;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->artist(), output);
  }
  
  // optional string coverArtId = 10;
  if (has_coverartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coverartid().data(), this->coverartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->coverartid(), output);
  }
  
  // optional string genre = 11;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->genre(), output);
  }
  
  // optional string path = 12;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->path(), output);
  }
  
  // optional string publisher = 13;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->publisher(), output);
  }
  
  // optional string title = 14;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->title(), output);
  }
  
  // optional string year = 15;
  if (has_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->year(), output);
  }
  
  // optional bool isCoverArtChecked = 16;
  if (has_iscoverartchecked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->iscoverartchecked(), output);
  }
  
  // optional string trackNumber = 17;
  if (has_tracknumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracknumber().data(), this->tracknumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->tracknumber(), output);
  }
  
  // optional uint64 duration = 18;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->duration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // optional uint64 createdAt = 2;
  if (has_createdat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->createdat(), target);
  }
  
  // optional uint64 updatedAt = 3;
  if (has_updatedat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->updatedat(), target);
  }
  
  // optional bool isVideo = 4;
  if (has_isvideo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvideo(), target);
  }
  
  // optional bool isAudio = 5;
  if (has_isaudio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isaudio(), target);
  }
  
  // optional uint64 lastPlayedAt = 6;
  if (has_lastplayedat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->lastplayedat(), target);
  }
  
  // optional string album = 8;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->album(), target);
  }
  
  // optional string artist = 9;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->artist(), target);
  }
  
  // optional string coverArtId = 10;
  if (has_coverartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coverartid().data(), this->coverartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->coverartid(), target);
  }
  
  // optional string genre = 11;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->genre(), target);
  }
  
  // optional string path = 12;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->path(), target);
  }
  
  // optional string publisher = 13;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->publisher(), target);
  }
  
  // optional string title = 14;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->title(), target);
  }
  
  // optional string year = 15;
  if (has_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->year(), target);
  }
  
  // optional bool isCoverArtChecked = 16;
  if (has_iscoverartchecked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->iscoverartchecked(), target);
  }
  
  // optional string trackNumber = 17;
  if (has_tracknumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracknumber().data(), this->tracknumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tracknumber(), target);
  }
  
  // optional uint64 duration = 18;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->duration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Track::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional uint64 createdAt = 2;
    if (has_createdat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createdat());
    }
    
    // optional uint64 updatedAt = 3;
    if (has_updatedat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatedat());
    }
    
    // optional bool isVideo = 4;
    if (has_isvideo()) {
      total_size += 1 + 1;
    }
    
    // optional bool isAudio = 5;
    if (has_isaudio()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 lastPlayedAt = 6;
    if (has_lastplayedat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastplayedat());
    }
    
    // optional string album = 8;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }
    
    // optional string artist = 9;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string coverArtId = 10;
    if (has_coverartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coverartid());
    }
    
    // optional string genre = 11;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }
    
    // optional string path = 12;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string publisher = 13;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // optional string title = 14;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string year = 15;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->year());
    }
    
    // optional bool isCoverArtChecked = 16;
    if (has_iscoverartchecked()) {
      total_size += 2 + 1;
    }
    
    // optional string trackNumber = 17;
    if (has_tracknumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracknumber());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 duration = 18;
    if (has_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_createdat()) {
      set_createdat(from.createdat());
    }
    if (from.has_updatedat()) {
      set_updatedat(from.updatedat());
    }
    if (from.has_isvideo()) {
      set_isvideo(from.isvideo());
    }
    if (from.has_isaudio()) {
      set_isaudio(from.isaudio());
    }
    if (from.has_lastplayedat()) {
      set_lastplayedat(from.lastplayedat());
    }
    if (from.has_album()) {
      set_album(from.album());
    }
    if (from.has_artist()) {
      set_artist(from.artist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_coverartid()) {
      set_coverartid(from.coverartid());
    }
    if (from.has_genre()) {
      set_genre(from.genre());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_publisher()) {
      set_publisher(from.publisher());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_iscoverartchecked()) {
      set_iscoverartchecked(from.iscoverartchecked());
    }
    if (from.has_tracknumber()) {
      set_tracknumber(from.tracknumber());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  
  return true;
}

void Track::Swap(Track* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(createdat_, other->createdat_);
    std::swap(updatedat_, other->updatedat_);
    std::swap(isvideo_, other->isvideo_);
    std::swap(isaudio_, other->isaudio_);
    std::swap(lastplayedat_, other->lastplayedat_);
    std::swap(album_, other->album_);
    std::swap(artist_, other->artist_);
    std::swap(coverartid_, other->coverartid_);
    std::swap(genre_, other->genre_);
    std::swap(path_, other->path_);
    std::swap(publisher_, other->publisher_);
    std::swap(title_, other->title_);
    std::swap(year_, other->year_);
    std::swap(iscoverartchecked_, other->iscoverartchecked_);
    std::swap(tracknumber_, other->tracknumber_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Track_descriptor_;
  metadata.reflection = Track_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackTableKey::kIdFieldNumber;
#endif  // !_MSC_VER

TrackTableKey::TrackTableKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackTableKey::InitAsDefaultInstance() {
}

TrackTableKey::TrackTableKey(const TrackTableKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackTableKey::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackTableKey::~TrackTableKey() {
  SharedDtor();
}

void TrackTableKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackTableKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackTableKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackTableKey_descriptor_;
}

const TrackTableKey& TrackTableKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Track_2eproto();  return *default_instance_;
}

TrackTableKey* TrackTableKey::default_instance_ = NULL;

TrackTableKey* TrackTableKey::New() const {
  return new TrackTableKey;
}

void TrackTableKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackTableKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackTableKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackTableKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackTableKey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackTableKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackTableKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackTableKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackTableKey::MergeFrom(const TrackTableKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackTableKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackTableKey::CopyFrom(const TrackTableKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackTableKey::IsInitialized() const {
  
  return true;
}

void TrackTableKey::Swap(TrackTableKey* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackTableKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackTableKey_descriptor_;
  metadata.reflection = TrackTableKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathIndexKey::kPathFieldNumber;
#endif  // !_MSC_VER

PathIndexKey::PathIndexKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathIndexKey::InitAsDefaultInstance() {
}

PathIndexKey::PathIndexKey(const PathIndexKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathIndexKey::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathIndexKey::~PathIndexKey() {
  SharedDtor();
}

void PathIndexKey::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void PathIndexKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathIndexKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathIndexKey_descriptor_;
}

const PathIndexKey& PathIndexKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Track_2eproto();  return *default_instance_;
}

PathIndexKey* PathIndexKey::default_instance_ = NULL;

PathIndexKey* PathIndexKey::New() const {
  return new PathIndexKey;
}

void PathIndexKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathIndexKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathIndexKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathIndexKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathIndexKey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathIndexKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathIndexKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathIndexKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathIndexKey::MergeFrom(const PathIndexKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathIndexKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathIndexKey::CopyFrom(const PathIndexKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathIndexKey::IsInitialized() const {
  
  return true;
}

void PathIndexKey::Swap(PathIndexKey* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathIndexKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathIndexKey_descriptor_;
  metadata.reflection = PathIndexKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathIndexValue::kIdFieldNumber;
#endif  // !_MSC_VER

PathIndexValue::PathIndexValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathIndexValue::InitAsDefaultInstance() {
}

PathIndexValue::PathIndexValue(const PathIndexValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathIndexValue::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathIndexValue::~PathIndexValue() {
  SharedDtor();
}

void PathIndexValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathIndexValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathIndexValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathIndexValue_descriptor_;
}

const PathIndexValue& PathIndexValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Track_2eproto();  return *default_instance_;
}

PathIndexValue* PathIndexValue::default_instance_ = NULL;

PathIndexValue* PathIndexValue::New() const {
  return new PathIndexValue;
}

void PathIndexValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathIndexValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathIndexValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathIndexValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathIndexValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathIndexValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathIndexValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathIndexValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathIndexValue::MergeFrom(const PathIndexValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathIndexValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathIndexValue::CopyFrom(const PathIndexValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathIndexValue::IsInitialized() const {
  
  return true;
}

void PathIndexValue::Swap(PathIndexValue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathIndexValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathIndexValue_descriptor_;
  metadata.reflection = PathIndexValue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace track

// @@protoc_insertion_point(global_scope)
