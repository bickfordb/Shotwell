// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Track.proto

#ifndef PROTOBUF_Track_2eproto__INCLUDED
#define PROTOBUF_Track_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace track {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Track_2eproto();
void protobuf_AssignDesc_Track_2eproto();
void protobuf_ShutdownFile_Track_2eproto();

class Track;
class TrackTableKey;
class PathIndexKey;
class PathIndexValue;

// ===================================================================

class Track : public ::google::protobuf::Message {
 public:
  Track();
  virtual ~Track();
  
  Track(const Track& from);
  
  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();
  
  void Swap(Track* other);
  
  // implements Message ----------------------------------------------
  
  Track* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // optional uint64 createdAt = 2;
  inline bool has_createdat() const;
  inline void clear_createdat();
  static const int kCreatedAtFieldNumber = 2;
  inline ::google::protobuf::uint64 createdat() const;
  inline void set_createdat(::google::protobuf::uint64 value);
  
  // optional uint64 updatedAt = 3;
  inline bool has_updatedat() const;
  inline void clear_updatedat();
  static const int kUpdatedAtFieldNumber = 3;
  inline ::google::protobuf::uint64 updatedat() const;
  inline void set_updatedat(::google::protobuf::uint64 value);
  
  // optional bool isVideo = 4;
  inline bool has_isvideo() const;
  inline void clear_isvideo();
  static const int kIsVideoFieldNumber = 4;
  inline bool isvideo() const;
  inline void set_isvideo(bool value);
  
  // optional bool isAudio = 5;
  inline bool has_isaudio() const;
  inline void clear_isaudio();
  static const int kIsAudioFieldNumber = 5;
  inline bool isaudio() const;
  inline void set_isaudio(bool value);
  
  // optional uint64 lastPlayedAt = 6;
  inline bool has_lastplayedat() const;
  inline void clear_lastplayedat();
  static const int kLastPlayedAtFieldNumber = 6;
  inline ::google::protobuf::uint64 lastplayedat() const;
  inline void set_lastplayedat(::google::protobuf::uint64 value);
  
  // optional string album = 8;
  inline bool has_album() const;
  inline void clear_album();
  static const int kAlbumFieldNumber = 8;
  inline const ::std::string& album() const;
  inline void set_album(const ::std::string& value);
  inline void set_album(const char* value);
  inline void set_album(const char* value, size_t size);
  inline ::std::string* mutable_album();
  inline ::std::string* release_album();
  
  // optional string artist = 9;
  inline bool has_artist() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 9;
  inline const ::std::string& artist() const;
  inline void set_artist(const ::std::string& value);
  inline void set_artist(const char* value);
  inline void set_artist(const char* value, size_t size);
  inline ::std::string* mutable_artist();
  inline ::std::string* release_artist();
  
  // optional string coverArtId = 10;
  inline bool has_coverartid() const;
  inline void clear_coverartid();
  static const int kCoverArtIdFieldNumber = 10;
  inline const ::std::string& coverartid() const;
  inline void set_coverartid(const ::std::string& value);
  inline void set_coverartid(const char* value);
  inline void set_coverartid(const char* value, size_t size);
  inline ::std::string* mutable_coverartid();
  inline ::std::string* release_coverartid();
  
  // optional string genre = 11;
  inline bool has_genre() const;
  inline void clear_genre();
  static const int kGenreFieldNumber = 11;
  inline const ::std::string& genre() const;
  inline void set_genre(const ::std::string& value);
  inline void set_genre(const char* value);
  inline void set_genre(const char* value, size_t size);
  inline ::std::string* mutable_genre();
  inline ::std::string* release_genre();
  
  // optional string path = 12;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 12;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // optional string publisher = 13;
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 13;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  inline ::std::string* release_publisher();
  
  // optional string title = 14;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 14;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string year = 15;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 15;
  inline const ::std::string& year() const;
  inline void set_year(const ::std::string& value);
  inline void set_year(const char* value);
  inline void set_year(const char* value, size_t size);
  inline ::std::string* mutable_year();
  inline ::std::string* release_year();
  
  // optional bool isCoverArtChecked = 16;
  inline bool has_iscoverartchecked() const;
  inline void clear_iscoverartchecked();
  static const int kIsCoverArtCheckedFieldNumber = 16;
  inline bool iscoverartchecked() const;
  inline void set_iscoverartchecked(bool value);
  
  // optional string trackNumber = 17;
  inline bool has_tracknumber() const;
  inline void clear_tracknumber();
  static const int kTrackNumberFieldNumber = 17;
  inline const ::std::string& tracknumber() const;
  inline void set_tracknumber(const ::std::string& value);
  inline void set_tracknumber(const char* value);
  inline void set_tracknumber(const char* value, size_t size);
  inline ::std::string* mutable_tracknumber();
  inline ::std::string* release_tracknumber();
  
  // optional uint64 duration = 18;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 18;
  inline ::google::protobuf::uint64 duration() const;
  inline void set_duration(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:track.Track)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_createdat();
  inline void clear_has_createdat();
  inline void set_has_updatedat();
  inline void clear_has_updatedat();
  inline void set_has_isvideo();
  inline void clear_has_isvideo();
  inline void set_has_isaudio();
  inline void clear_has_isaudio();
  inline void set_has_lastplayedat();
  inline void clear_has_lastplayedat();
  inline void set_has_album();
  inline void clear_has_album();
  inline void set_has_artist();
  inline void clear_has_artist();
  inline void set_has_coverartid();
  inline void clear_has_coverartid();
  inline void set_has_genre();
  inline void clear_has_genre();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_publisher();
  inline void clear_has_publisher();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_iscoverartchecked();
  inline void clear_has_iscoverartchecked();
  inline void set_has_tracknumber();
  inline void clear_has_tracknumber();
  inline void set_has_duration();
  inline void clear_has_duration();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 createdat_;
  ::google::protobuf::uint64 updatedat_;
  ::google::protobuf::uint64 lastplayedat_;
  ::std::string* album_;
  ::std::string* artist_;
  ::std::string* coverartid_;
  ::std::string* genre_;
  ::std::string* path_;
  ::std::string* publisher_;
  ::std::string* title_;
  ::std::string* year_;
  ::std::string* tracknumber_;
  ::google::protobuf::uint64 duration_;
  bool isvideo_;
  bool isaudio_;
  bool iscoverartchecked_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_Track_2eproto();
  friend void protobuf_AssignDesc_Track_2eproto();
  friend void protobuf_ShutdownFile_Track_2eproto();
  
  void InitAsDefaultInstance();
  static Track* default_instance_;
};
// -------------------------------------------------------------------

class TrackTableKey : public ::google::protobuf::Message {
 public:
  TrackTableKey();
  virtual ~TrackTableKey();
  
  TrackTableKey(const TrackTableKey& from);
  
  inline TrackTableKey& operator=(const TrackTableKey& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackTableKey& default_instance();
  
  void Swap(TrackTableKey* other);
  
  // implements Message ----------------------------------------------
  
  TrackTableKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackTableKey& from);
  void MergeFrom(const TrackTableKey& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:track.TrackTableKey)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Track_2eproto();
  friend void protobuf_AssignDesc_Track_2eproto();
  friend void protobuf_ShutdownFile_Track_2eproto();
  
  void InitAsDefaultInstance();
  static TrackTableKey* default_instance_;
};
// -------------------------------------------------------------------

class PathIndexKey : public ::google::protobuf::Message {
 public:
  PathIndexKey();
  virtual ~PathIndexKey();
  
  PathIndexKey(const PathIndexKey& from);
  
  inline PathIndexKey& operator=(const PathIndexKey& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathIndexKey& default_instance();
  
  void Swap(PathIndexKey* other);
  
  // implements Message ----------------------------------------------
  
  PathIndexKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathIndexKey& from);
  void MergeFrom(const PathIndexKey& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:track.PathIndexKey)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Track_2eproto();
  friend void protobuf_AssignDesc_Track_2eproto();
  friend void protobuf_ShutdownFile_Track_2eproto();
  
  void InitAsDefaultInstance();
  static PathIndexKey* default_instance_;
};
// -------------------------------------------------------------------

class PathIndexValue : public ::google::protobuf::Message {
 public:
  PathIndexValue();
  virtual ~PathIndexValue();
  
  PathIndexValue(const PathIndexValue& from);
  
  inline PathIndexValue& operator=(const PathIndexValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathIndexValue& default_instance();
  
  void Swap(PathIndexValue* other);
  
  // implements Message ----------------------------------------------
  
  PathIndexValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathIndexValue& from);
  void MergeFrom(const PathIndexValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:track.PathIndexValue)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Track_2eproto();
  friend void protobuf_AssignDesc_Track_2eproto();
  friend void protobuf_ShutdownFile_Track_2eproto();
  
  void InitAsDefaultInstance();
  static PathIndexValue* default_instance_;
};
// ===================================================================


// ===================================================================

// Track

// optional uint64 id = 1;
inline bool Track::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Track::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Track::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Track::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Track::id() const {
  return id_;
}
inline void Track::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 createdAt = 2;
inline bool Track::has_createdat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Track::set_has_createdat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Track::clear_has_createdat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Track::clear_createdat() {
  createdat_ = GOOGLE_ULONGLONG(0);
  clear_has_createdat();
}
inline ::google::protobuf::uint64 Track::createdat() const {
  return createdat_;
}
inline void Track::set_createdat(::google::protobuf::uint64 value) {
  set_has_createdat();
  createdat_ = value;
}

// optional uint64 updatedAt = 3;
inline bool Track::has_updatedat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Track::set_has_updatedat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Track::clear_has_updatedat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Track::clear_updatedat() {
  updatedat_ = GOOGLE_ULONGLONG(0);
  clear_has_updatedat();
}
inline ::google::protobuf::uint64 Track::updatedat() const {
  return updatedat_;
}
inline void Track::set_updatedat(::google::protobuf::uint64 value) {
  set_has_updatedat();
  updatedat_ = value;
}

// optional bool isVideo = 4;
inline bool Track::has_isvideo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Track::set_has_isvideo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Track::clear_has_isvideo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Track::clear_isvideo() {
  isvideo_ = false;
  clear_has_isvideo();
}
inline bool Track::isvideo() const {
  return isvideo_;
}
inline void Track::set_isvideo(bool value) {
  set_has_isvideo();
  isvideo_ = value;
}

// optional bool isAudio = 5;
inline bool Track::has_isaudio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Track::set_has_isaudio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Track::clear_has_isaudio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Track::clear_isaudio() {
  isaudio_ = false;
  clear_has_isaudio();
}
inline bool Track::isaudio() const {
  return isaudio_;
}
inline void Track::set_isaudio(bool value) {
  set_has_isaudio();
  isaudio_ = value;
}

// optional uint64 lastPlayedAt = 6;
inline bool Track::has_lastplayedat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Track::set_has_lastplayedat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Track::clear_has_lastplayedat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Track::clear_lastplayedat() {
  lastplayedat_ = GOOGLE_ULONGLONG(0);
  clear_has_lastplayedat();
}
inline ::google::protobuf::uint64 Track::lastplayedat() const {
  return lastplayedat_;
}
inline void Track::set_lastplayedat(::google::protobuf::uint64 value) {
  set_has_lastplayedat();
  lastplayedat_ = value;
}

// optional string album = 8;
inline bool Track::has_album() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Track::set_has_album() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Track::clear_has_album() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Track::clear_album() {
  if (album_ != &::google::protobuf::internal::kEmptyString) {
    album_->clear();
  }
  clear_has_album();
}
inline const ::std::string& Track::album() const {
  return *album_;
}
inline void Track::set_album(const ::std::string& value) {
  set_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    album_ = new ::std::string;
  }
  album_->assign(value);
}
inline void Track::set_album(const char* value) {
  set_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    album_ = new ::std::string;
  }
  album_->assign(value);
}
inline void Track::set_album(const char* value, size_t size) {
  set_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    album_ = new ::std::string;
  }
  album_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_album() {
  set_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    album_ = new ::std::string;
  }
  return album_;
}
inline ::std::string* Track::release_album() {
  clear_has_album();
  if (album_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_;
    album_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string artist = 9;
inline bool Track::has_artist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Track::set_has_artist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Track::clear_has_artist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Track::clear_artist() {
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    artist_->clear();
  }
  clear_has_artist();
}
inline const ::std::string& Track::artist() const {
  return *artist_;
}
inline void Track::set_artist(const ::std::string& value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void Track::set_artist(const char* value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void Track::set_artist(const char* value, size_t size) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_artist() {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  return artist_;
}
inline ::std::string* Track::release_artist() {
  clear_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = artist_;
    artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string coverArtId = 10;
inline bool Track::has_coverartid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Track::set_has_coverartid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Track::clear_has_coverartid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Track::clear_coverartid() {
  if (coverartid_ != &::google::protobuf::internal::kEmptyString) {
    coverartid_->clear();
  }
  clear_has_coverartid();
}
inline const ::std::string& Track::coverartid() const {
  return *coverartid_;
}
inline void Track::set_coverartid(const ::std::string& value) {
  set_has_coverartid();
  if (coverartid_ == &::google::protobuf::internal::kEmptyString) {
    coverartid_ = new ::std::string;
  }
  coverartid_->assign(value);
}
inline void Track::set_coverartid(const char* value) {
  set_has_coverartid();
  if (coverartid_ == &::google::protobuf::internal::kEmptyString) {
    coverartid_ = new ::std::string;
  }
  coverartid_->assign(value);
}
inline void Track::set_coverartid(const char* value, size_t size) {
  set_has_coverartid();
  if (coverartid_ == &::google::protobuf::internal::kEmptyString) {
    coverartid_ = new ::std::string;
  }
  coverartid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_coverartid() {
  set_has_coverartid();
  if (coverartid_ == &::google::protobuf::internal::kEmptyString) {
    coverartid_ = new ::std::string;
  }
  return coverartid_;
}
inline ::std::string* Track::release_coverartid() {
  clear_has_coverartid();
  if (coverartid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = coverartid_;
    coverartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string genre = 11;
inline bool Track::has_genre() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Track::set_has_genre() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Track::clear_has_genre() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Track::clear_genre() {
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    genre_->clear();
  }
  clear_has_genre();
}
inline const ::std::string& Track::genre() const {
  return *genre_;
}
inline void Track::set_genre(const ::std::string& value) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(value);
}
inline void Track::set_genre(const char* value) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(value);
}
inline void Track::set_genre(const char* value, size_t size) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_genre() {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  return genre_;
}
inline ::std::string* Track::release_genre() {
  clear_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = genre_;
    genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string path = 12;
inline bool Track::has_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Track::set_has_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Track::clear_has_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Track::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Track::path() const {
  return *path_;
}
inline void Track::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Track::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Track::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* Track::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string publisher = 13;
inline bool Track::has_publisher() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Track::set_has_publisher() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Track::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Track::clear_publisher() {
  if (publisher_ != &::google::protobuf::internal::kEmptyString) {
    publisher_->clear();
  }
  clear_has_publisher();
}
inline const ::std::string& Track::publisher() const {
  return *publisher_;
}
inline void Track::set_publisher(const ::std::string& value) {
  set_has_publisher();
  if (publisher_ == &::google::protobuf::internal::kEmptyString) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void Track::set_publisher(const char* value) {
  set_has_publisher();
  if (publisher_ == &::google::protobuf::internal::kEmptyString) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void Track::set_publisher(const char* value, size_t size) {
  set_has_publisher();
  if (publisher_ == &::google::protobuf::internal::kEmptyString) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_publisher() {
  set_has_publisher();
  if (publisher_ == &::google::protobuf::internal::kEmptyString) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}
inline ::std::string* Track::release_publisher() {
  clear_has_publisher();
  if (publisher_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = publisher_;
    publisher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string title = 14;
inline bool Track::has_title() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Track::set_has_title() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Track::clear_has_title() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Track::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Track::title() const {
  return *title_;
}
inline void Track::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Track::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Track::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Track::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string year = 15;
inline bool Track::has_year() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Track::set_has_year() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Track::clear_has_year() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Track::clear_year() {
  if (year_ != &::google::protobuf::internal::kEmptyString) {
    year_->clear();
  }
  clear_has_year();
}
inline const ::std::string& Track::year() const {
  return *year_;
}
inline void Track::set_year(const ::std::string& value) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(value);
}
inline void Track::set_year(const char* value) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(value);
}
inline void Track::set_year(const char* value, size_t size) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_year() {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  return year_;
}
inline ::std::string* Track::release_year() {
  clear_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = year_;
    year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isCoverArtChecked = 16;
inline bool Track::has_iscoverartchecked() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Track::set_has_iscoverartchecked() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Track::clear_has_iscoverartchecked() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Track::clear_iscoverartchecked() {
  iscoverartchecked_ = false;
  clear_has_iscoverartchecked();
}
inline bool Track::iscoverartchecked() const {
  return iscoverartchecked_;
}
inline void Track::set_iscoverartchecked(bool value) {
  set_has_iscoverartchecked();
  iscoverartchecked_ = value;
}

// optional string trackNumber = 17;
inline bool Track::has_tracknumber() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Track::set_has_tracknumber() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Track::clear_has_tracknumber() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Track::clear_tracknumber() {
  if (tracknumber_ != &::google::protobuf::internal::kEmptyString) {
    tracknumber_->clear();
  }
  clear_has_tracknumber();
}
inline const ::std::string& Track::tracknumber() const {
  return *tracknumber_;
}
inline void Track::set_tracknumber(const ::std::string& value) {
  set_has_tracknumber();
  if (tracknumber_ == &::google::protobuf::internal::kEmptyString) {
    tracknumber_ = new ::std::string;
  }
  tracknumber_->assign(value);
}
inline void Track::set_tracknumber(const char* value) {
  set_has_tracknumber();
  if (tracknumber_ == &::google::protobuf::internal::kEmptyString) {
    tracknumber_ = new ::std::string;
  }
  tracknumber_->assign(value);
}
inline void Track::set_tracknumber(const char* value, size_t size) {
  set_has_tracknumber();
  if (tracknumber_ == &::google::protobuf::internal::kEmptyString) {
    tracknumber_ = new ::std::string;
  }
  tracknumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_tracknumber() {
  set_has_tracknumber();
  if (tracknumber_ == &::google::protobuf::internal::kEmptyString) {
    tracknumber_ = new ::std::string;
  }
  return tracknumber_;
}
inline ::std::string* Track::release_tracknumber() {
  clear_has_tracknumber();
  if (tracknumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tracknumber_;
    tracknumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 duration = 18;
inline bool Track::has_duration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Track::set_has_duration() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Track::clear_has_duration() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Track::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::uint64 Track::duration() const {
  return duration_;
}
inline void Track::set_duration(::google::protobuf::uint64 value) {
  set_has_duration();
  duration_ = value;
}

// -------------------------------------------------------------------

// TrackTableKey

// optional uint64 id = 1;
inline bool TrackTableKey::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackTableKey::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackTableKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackTableKey::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 TrackTableKey::id() const {
  return id_;
}
inline void TrackTableKey::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// PathIndexKey

// optional string path = 1;
inline bool PathIndexKey::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathIndexKey::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathIndexKey::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathIndexKey::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& PathIndexKey::path() const {
  return *path_;
}
inline void PathIndexKey::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PathIndexKey::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PathIndexKey::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PathIndexKey::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* PathIndexKey::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PathIndexValue

// optional uint64 id = 1;
inline bool PathIndexValue::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathIndexValue::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathIndexValue::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathIndexValue::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 PathIndexValue::id() const {
  return id_;
}
inline void PathIndexValue::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace track

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Track_2eproto__INCLUDED
